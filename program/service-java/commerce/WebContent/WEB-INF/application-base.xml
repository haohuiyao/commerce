<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<context:component-scan base-package="com.meeno.framework.action" />
	<context:component-scan base-package="com.meeno.framework.*.*" />
	<!-- 权限 -->

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="mappingJarLocations"> <list> <value>/WEB-INF/lib/miao-framework-entity.jar</value> 
			</list> </property> -->
		<property name="mappingLocations">
			<list>
				<!-- 基本框架，包含账号、角色、资源、权限、日志 -->
				<value>classpath*:/com/meeno/framework/hibernate/maps/mysql/*.hbm.xml
				</value>
				<!-- 数据字典 -->
				<value>classpath*:/com/meeno/dictionary/hibernate/mysql/*.hbm.xml
				</value>
				<!-- 数据权限 -->
				<value>classpath*:/com/meeno/authority/hibernate/mysql/*.hbm.xml
				</value>
				<!-- 定时任务 -->
				<value>classpath*:/com/meeno/schedule/hibernate/mysql/*.hbm.xml
				</value>
				<!-- 邮件组件 -->
				<value>classpath*:/com/meeno/mail/hibernate/mysql/*.hbm.xml</value>
				<!-- 业务实体 -->
				<value>classpath*:/com/meeno/ebusiness/*/hibernate/mysql/*.hbm.xml
				</value>
				<!-- 上传组件 -->
				<value>classpath*:/com/meeno/upload/hibernate/mysql/*.hbm.xml
				</value>
				<!-- -->
				<value>classpath*:/com/meeno/ebusiness/*/entity/*.hbm.xml</value>
				<value>classpath*:/com/meeno/framework/*/entity/*.hbm.xml</value>
				<!-- product -->
				<value>classpath*:/com/meeno/ext/product/*/entity/*.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect"> ${hibernate.dialect} </prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.default_batch_fetch_size">30</prop>
				<prop key="hibernate.search.default.directory_provider">filesystem</prop>
				<prop key="hibernate.search.default.indexBase">E:/index/ecommerce</prop>
			</props>
		</property>
		<!-- <property name="lobHandler"> <ref local="oracleLobHandler" /> </property> -->
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean
						class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
			</map>
		</property>
	</bean>
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<aop:aspectj-autoproxy />
	<!-- - The controllers are autodetected POJOs labeled with the @Controller 
		annotation. -->
	<bean name="openSessionInViewInterceptor"
		class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>


	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean id="stringHttpMessageConverter"
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="writeAcceptCharset" value="false" /><!-- 用于避免响应头过大 -->
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<ref bean="openSessionInViewInterceptor" />
			<!-- 如果有其他数据源，请配置对应的session拦截器，然后放置到这个地方 -->
		</property>
	</bean>
	<!-- Activates various annotations to be detected in bean classes: Spring's 
		@Required and @Autowired, as well as JSR 250's @Resource. -->
	<context:annotation-config />

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>


	<!-- Encrypt definition -->
	<bean id="encrypt" class="com.meeno.framework.util.DESEncryptor" />
	<!-- Message source for this context, loaded from localized "messages_xx" 
		files -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxUploadSize">
			<value>209715200</value>
		</property>
		<!-- <property name="uploadTempDir" ref="tempDirectory"> </property> // -->
	</bean>
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>MessageResources</value>
			</list>
		</property>
	</bean>
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />


	<!-- ========================= ASPECT CONFIGURATION ======================== -->
	<!-- call method information configuration -->
	<!-- call method information -->
	<!-- <bean id="callMethodLog" class="com.meeno.framework.service.LogCallMethodAdvice" 
		/> <aop:config> <aop:aspect id="serviceMethodLog" ref="callMethodLog"> <aop:pointcut 
		expression="execution(* com.meeno.*.service.*Impl.*(..))" id="serviceLogCut" 
		/> <aop:before method="logInfo" pointcut-ref="serviceLogCut" /> <aop:after 
		method="logInfoAfter" pointcut-ref="serviceLogCut" /> </aop:aspect> </aop:config> -->

	<!-- Transaction configuration -->
	<aop:config>
		<aop:pointcut id="frameworkMethods"
			expression="execution(* com.meeno.framework.*.service.*Impl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="frameworkMethods" />
	</aop:config>

	<aop:config>
		<aop:pointcut id="baseServiceMethods"
			expression="execution(* com.meeno.framework.service.*Impl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
</beans>
